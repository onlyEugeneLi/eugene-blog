#############################################################
###                       Networking                      ###
#############################################################

=> MacOS check IP address assigned by router
	ifconfig -a | grep broadcast (Dsiplayed in en0)

=> MacOS check IP address assigned by ISP outside LAN
	curl ifconfig.me

=> IPv4 Network Gateway (Router console): 
	route -n | grep 'UG[ \t]' | awk '{print }'

=> Append text to file: 
	cat file >> copy_file; 

=> Check nginx status and logs: 
	systemctl status nginx

=> Check all processes: 
	sudo netstat -tulpn

=> Kill process: 
	sudo kill -2 <PID>

=> Activate Clipboard: 
	sudo VBoxClient --clipboard 
[reference](https://superuser.com/a/1367954/2747755)

=> See local Private IP: 
	hostname -I

#############################################################
###                    File Management                    ###
#############################################################

=> Remove first line of a file
	tail -n +2 books.csv > tmp.csv && mv tmp.csv books.csv
	sed -i '1d' books.csv
	
	
=> Remove last line of a file
	sed -i '$ d' foo.txt
		-i [inplace]
		$ [last line]
		d [delete]

=> Remove directory
	[Remove direcotry and content] rm -rv <directory>
	[Remove empty directory] rmdir <directory>

=> Find text in current directory files and all files in subdirectory
	-------------------------
	 grep -i -r "target_text" 
	-------------------------

=> Find folder or directory containing certain text
	---------------------------------
	 find | grep -i -r "target_text" 
	---------------------------------

	find: prints all direcotries and subdirectories

#############################################################
###                     SSH & Firewall                    ###
#############################################################

=> Install SSH server
	sudo apt install openssh-server
	
=> Check status
	sudo systemctl status ssh

=> SSH permission initialisation
	chmod 700 ~/.ssh
	chmod 600 ~/.ssh/authorized_keys
	/* Edit SSH system settings */
	vi /etc/ssh/sshd_config
	/* Enable or uncomment following lines (Look out for uppercase) */
	PubkeyAuthentication yes
	AuthorizedKeysFile .ssh/authorized_keys

=> Enable SSH 
	sudo systemctl enable ssh --now

=> Restart SSH after new settings
	sudo systemctl restart ssh
	
=> Allowing connections in firewall
	sudo ufw status {verbose}
	sudo ufw allow { ssh | 22 | OpenSSH }
	sudo ufw allow { http | 80 }
	
=> Delete UFW rule 

	By number:
	sudo ufw status numbered
	sudo ufw delete <numebr>

	By name:
	sudo ufw delete allow <service-name>
	<service-name>: http, ssh ...
	
=> Check port status
	sudo lsof -i -P -n | grep LISTEN

=> Check UFW firewall configuration rules
	sudo ufw show added
	
=> Enable UFW firewall
	sudo ufw enable

=> SSH key generation
	ssh-keygen

=> SSH key change password
	ssh-keygen -p
	Enter filename /* Make sure you are in the same path as the private key */

=> Copy public key to a client computer on the LAN
	ssh-copy-id -i <.pub file path> username@IPv4 (for MacBook: computername@username.mynet)

=> SSH into VirutalBox Ubuntu
	ssh -p 22(host port) username@IPv4
	ssh -i <pub-key path> -v username@target_ip /* Explicitly use the public key and display debug steps */

	Simplify the command:
	vi ~/.ssh/config 
	Add following configuration:{
		Host simple-name
		  HostName <IPv4 address> 
		  User <username>
		  IdentityFile <private_key_file_path>
	}
	

#############################################################
###                           Git                         ###
#############################################################

=> Check git configuration
	git config --list

=> Update user.name or user.email
	git config --global user.name "<username>"
	git config --global user.name "<user-private-email>"

=> Change a folder's name from olderfolder to newfolder
	git mv olderfolder newfolder

	git mv foldername tempname && git mv tempname foldername 

=> Display branch reference
	git branch -r

=> git fetch: Downloads commits, files and refs from a remote repository into local repo
	git fetch <remote> (normally origin) <branch-name>
	git fetch --all

=> git pull: Fetch and download content from a remote repo and immediately update the local repo to match that content
	git checkout <branch-name> /* Go to local branch needed to merge first */
	git pull --verbose /* Display content being downloaded */ 
	git pull --rebase origin /* I want to put my changes on top of what everybody else has done */

=> Remove directory and all its content
	git rm -rv <directory>