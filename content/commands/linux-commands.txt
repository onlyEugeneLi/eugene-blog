#############################################################
###                       Networking                      ###
#############################################################

=> MacOS check IP address assigned by router
	ifconfig -a | grep broadcast (Dsiplayed in en0)

=> MacOS check IP address assigned by ISP outside LAN
	curl ifconfig.me

=> IPv4 Network Gateway (Router console): 
	route -n | grep 'UG[ \t]' | awk '{print }'

=> Append text to file: 
	cat file >> copy_file; 

=> Check nginx status and logs: 
	systemctl status nginx

=> Check all processes: 
	sudo netstat -tulpn

=> Kill process: 
	sudo kill -2 <PID>

=> Activate Clipboard: 
	sudo VBoxClient --clipboard 
[reference](https://superuser.com/a/1367954/2747755)

=> See local Private IP: 
	hostname -I

#############################################################
###                    File Management                    ###
#############################################################

=> Remove first line of a file
	tail -n +2 books.csv > tmp.csv && mv tmp.csv books.csv
	sed -i '1d' books.csv
	
	
=> Remove last line of a file
	sed -i '$ d' foo.txt
		-i [inplace]
		$ [last line]
		d [delete]

=> Remove directory
	[Remove direcotry and content] rm -rv <directory>
	[Remove empty directory] rmdir <directory>

=> Find text in current directory files and all files in subdirectory
	-------------------------
	 grep -i -r "target_text" 
	-------------------------

=> Find folder or directory containing certain text
	---------------------------------
	 find | grep -i -r "target_text" 
	---------------------------------

	find: prints all direcotries and subdirectories

#############################################################
###                     SSH & Firewall                    ###
#############################################################

=> Install SSH server
	sudo apt install openssh-server
	
=> Check status
	sudo systemctl status ssh

=> SSH permission initialisation
	chmod 700 ~/.ssh
	chmod 600 ~/.ssh/authorized_keys
	/* Edit SSH system settings */
	vi /etc/ssh/sshd_config
	/* Enable or uncomment following lines (Look out for uppercase) */
	PubkeyAuthentication yes
	AuthorizedKeysFile .ssh/authorized_keys

=> Enable SSH 
	sudo systemctl enable ssh --now

=> Restart SSH after new settings
	sudo systemctl restart ssh
	
=> Allowing connections in firewall
	sudo ufw status {verbose}
	sudo ufw allow { ssh | 22 | OpenSSH }
	sudo ufw allow { http | 80 }
	
=> Delete UFW rule 

	By number:
	sudo ufw status numbered
	sudo ufw delete <numebr>

	By name:
	sudo ufw delete allow <service-name>
	<service-name>: http, ssh ...
	
=> Check port status
	sudo lsof -i -P -n | grep LISTEN

=> Check UFW firewall configuration rules
	sudo ufw show added
	
=> Enable UFW firewall
	sudo ufw enable

=> SSH key generation
	ssh-keygen

=> SSH key change password
	ssh-keygen -p
	Enter filename /* Make sure you are in the same path as the private key */

=> Copy public key to a client computer on the LAN
	ssh-copy-id -i <.pub file path> username@IPv4 (for MacBook: computername@username.mynet)

=> SSH into VirutalBox Ubuntu
	ssh -p 22(host port) username@IPv4
	ssh -i <pub-key path> -v username@target_ip /* Explicitly use the public key and display debug steps */

	Simplify the command:
	vi ~/.ssh/config 
	Add following configuration:{
		Host simple-name
		  HostName <IPv4 address> 
		  User <username>
		  IdentityFile <private_key_file_path>
	}
	

#############################################################
###                           Git                         ###
#############################################################

=> Check git configuration
	git config --list

=> Update user.name or user.email
	git config --global user.name "<username>"
	git config --global user.name "<user-private-email>"

=> Change a folder's name from olderfolder to newfolder
	git mv olderfolder newfolder

	git mv foldername tempname && git mv tempname foldername 

=> Display branch reference
	git branch -r

=> git fetch: Downloads commits, files and refs from a remote repository into local repo
	git fetch <remote> (normally origin) <branch-name>
	git fetch --all

=> git pull: Fetch and download content from a remote repo and immediately update the local repo to match that content
	git checkout <branch-name> /* Go to local branch needed to merge first */
	git pull --verbose /* Display content being downloaded */ 
	git pull --rebase origin /* I want to put my changes on top of what everybody else has done */

=> Remove directory and all its content
	git rm -rv <directory>

#############################################################
###                 Scheduling job                        ###
#############################################################

=> Schedule jobs using the Linux 'cron' utility

	cron file for each user in the (/etc/cron.d/) directory
	system-wide cron configuration file at (/etc/crontab)

=> Check cron utility status
	--------------------------------
	 sudo systemctl status crond
	--------------------------------

=> Check cron configuration files
	User specific:
		------------------------
		 ls -l /etc/cron.d/
		------------------------
	System-wide:
		------------------------
		 ls -l /etc/crontab
		------------------------
	
=> Schedule jobs with 'cron'
	
	Schedule syntax

	Example of job definition:
	.---------------- minute (0 - 59)
	|  .------------- hour (0 - 23)
	|  |  .---------- day of month (1 - 31)
	|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
	|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
	|  |  |  |  |
	*  *  *  *  * user-name  command to be executed

	>> Use x-y for a range: For example, place 1-5 in the Days column for a job to run from Monday to Friday.
	>> Use x,y for lists: For example, place 5,10-13,17 in the Minutes column for a job to run at 5, 10, 11, 12, 13, and 17 minutes past the hour.
	>> Use */x to indicate an [interval of x]: For example, place */7 in the Minutes column to run a job every seven minutes.


=> Checking whether the current user has any scheduled jobs
	----------------
	 crontab -l
	----------------

=> Edit the crontab file and add the necessary parameters
	----------------
	 crontab -e 
	----------------
	Tasks:

	1. (/home/localuser/source) be backed up incrementally close to the end of every day (11 pm) to the directory (/home/localuser/destination)
		00 23 * * *	localuser	rsync -av /home/localuser/source /home/localuser/destination

	2. every Saturday (6), at noon (12 (24 hr)), (/home/localuser/destination) to be fully backed up to the (/home/localuser/full) directory
		00 12 * * 6	localuser	cp -R /home/localuser/destination/* /home/localuser/full/

=> To remove the scheduled jobs, simply run crontab (-r)
	----------------
	 crontab -r
	----------------

#############################################################
###                   System Admin                        ###
#############################################################

=> CPU utilisation
	MacOS:
	-------------------------------------------------
	 ps -A -o %cpu | awk '{s+=$1} END {print s "%"}'
	-------------------------------------------------
		ps is the process status tool. Most *nix like operating systems support it. There are a few flags we want to pass to it:
			-A means all processes, not just the ones running as you.
			-o lets us specify the output we want. In this case, it all we want to the cpu% column of ps's output.
	
	Linux:
	----------
	 lscpu
	----------

=> Display memory usage information
	----------
	 free -h 
	----------

=> Show disk space usage
	----------
	 df -h 
	----------

=> Estimate file and directory sizes
	-----------------
	 du -hs directory # provides the total size of the specified directory
	-----------------

==================================
|	  		Networking	 		 |
==================================

=> Display network interface information
	----------
	 ifconfig 
	----------

=> Send ping request to a host
	-----------------
	 ping IPv4_addr 
	-----------------

=> Network connection: Shows all listening TCP and UDP connections
	-----------------
	 netstat -tuln
	-----------------

=> Download files from web
	-----------------
	 wget URL
	-----------------

=> Transfer data to or from a server
	-----------------
	 curl URL
	-----------------

==================================
|	  		Environment	 		 |
==================================

=> Sets the value of an environment variable
	----------------------------------
	 export VARIABLE_NAME=value
	----------------------------------

=> Displays the value of a specific environment variable
	----------------------------------
	  echo $VARIABLE_NAME
	----------------------------------

=> Lists all environment variables currently set in the system
	----------------------------------
	  env
	----------------------------------

=> Unsets or removes an environment variable
	----------------------------------
	  unset VARIABLE_NAME
	----------------------------------
